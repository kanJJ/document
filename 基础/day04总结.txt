1,流程控制语句
	(1)顺序结构
	(2)选择结构
	(3)循环结构
		A:分类
			a:for循环
				格式:
					for(初始化语句;条件表达式;控制语句) {
						循环体;
					}
				执行流程
					A:执行初始化语句
					B:执行条件表达式,看结果是true还是false
						如果是false,结束循环
						如果是true,继续执行
					C:执行循环体
					D:执行控制语句
					E:回到B
				注意事项:
					条件表达式不管简单还是复杂,结果是boolean类型
					有左大括号就没有分号,有分号就没有左大括号
					如果循环体是一条语句,大括号可以省略,但是不建议
			b:while循环
				格式:
					初始化语句;
					while(条件表达式) {
						循环体;
						控制语句;
					}
				执行流程:
					A:执行初始化语句
					B:执行条件表达式,看结果是true还是false
						如果是false,结束循环
						如果是true,继续执行
					C:执行循环体
					D:执行控制语句
					E:回到B
				
			c:do..while循环
				格式:
					初始化语句;
					do {
						循环体;
						控制语句;
					} while(条件表达式);
				执行流程:
					A:执行初始化语句
					B:执行循环体
					C:执行控制语句
					D:执行条件表达式,肯结果是false还是true
						如果是false,结束循环
						如果是true,继续执行,回到B
			d:三种循环的区别
				do...while是不管条件满足不满足至少执行1次
				while和for循环,如果条件表达式的结果是false,一次都不执行
			
				for循环里的变量在循环结束后释放,while则不是

				适用场景:for循环一般用于明确循环次数,while循环一般用于不明确循环次数
2,控制跳转语句
	(1)break
		使用场景:switch和循环中
		作用:跳出循环(结束循环)
	(2)continue
		使用场景:循环中
		作用:结束本次循环,继续下次循环
	(3)return
		使用场景:方法中
		作用:结束方法
3,方法(函数)
	(1)格式:
		修饰符 返回值类型 方法名(参数列表) {
			方法体;
			return 返回值;
		}
	(2)格式说明:
		修饰符:public static
		返回值类型:数据类型
		方法名:合法的表示符
		参数:
			形式参数:
				在方法声明上
			实际参数:
				实际参与运算的
		return:结束方法的,如果有返回值,由return带回
	(3)方法定义的两个明确
		A:返回值类型
		B:参数列表
	(4)方法调用:
		有返回值的方法调用
			A:单独调用(没有意义)
			B:输出调用(不建议)
			C:赋值调用(推荐使用)
		没有返回值的方法调用
			A:单独调用
			B:输出调用(错误)
			C:赋值调用(错误)
	(5)方法重载
		概述:方法名相同,参数列表不同,与返回值无关
		分类:
			A:参数个数不同
			B:参数类型不同
				顺序不同
	
	
				
					